import config
import logging
import asyncio
from datetime import datetime

from aiogram import Bot, Dispatcher, executor, types
from sqlighter import SQLighter

from stopgame import StopGame

# –∑–∞–¥–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = Bot(token=config.API_TOKEN)
dp = Dispatcher(bot)

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
db = SQLighter('database.sqlite')
ioloop = asyncio.get_event_loop()
# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä
sg = StopGame('lastkey.txt')


# –ö–æ–º–∞–Ω–¥–∞ c—Ç–∞—Ä—Ç
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
	if(not db.subscriber_exists(message.from_user.id)):
		# –µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
		db.add_subscriber(message.from_user.id)
		await message.answer("–ü—Ä–∏–≤–µ—Ç, –±–æ—Ç –ø–æ—à—ë–ª –≤ —Ä–∞–±–æ—Ç—É")

# –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –∏–≥—Ä –∏ –¥–µ–ª–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫–∏
async def scheduled(wait_for):
	while True:
		await asyncio.sleep(wait_for)
		# –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –∏–≥—Ä
		new_games = sg.new_games()

		if new_games:

			cost = sg.find_cost()
			link = sg.find_link()
			price = float(cost)
			print(cost)
			print(price)
			
			subscriptions = db.get_subscriptions()
			if price <= 1500.00:
				for s in subscriptions:
					await bot.send_message(
						s[0],
						text = f"üìå –ù–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞ *FunPay*\n\nüìù {new_games}\n\nüíµ *{cost} —Ä*\n\n‚úÖ {link}",
						parse_mode="MARKDOWN"
						)

# –∑–∞–ø—É—Å–∫–∞–µ–º –ª–æ–Ω–≥ –ø–æ–ª–ª–∏–Ω–≥
if __name__ == '__main__':
	ioloop.create_task(scheduled(3))
	executor.start_polling(dp, skip_updates=True)